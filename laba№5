//1) Дано ціле число N(> 1). Знайти найменше ціле число K, при якому виконується нерівність 3K > N.
//Лістинг програми

#include <stdio.h>
#include <cstdlib>
#include <cilk/cilk.h>
#include <iostream>
using namespace std;
void func()
{
	int N,K=1;
	cout << "Vvedit chuslo N: ";
	cin >> N;
	while(3*K<N)
	{K++;}
	cout << "Chuslo K: "<<K<<endl;
}
int main(int argc, char* argv[])
{		
	cilk_spawn func();
	cilk_sync;
	system("pause");
	return 0;
}

//2) У двовимірному масиві записані по m оцінок n студентів. Вкажіть номера студентів, середня оцінка яких більше 4,5.
//Лістинг програми

#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <cilk/cilk.h>
#include <cilk/reducer_opadd.h>
#include <windows.h>
using namespace std;

void vuvid(int mas[5][5]) // виведення початкового масиву на екран
{	
	cout<<"Номер судента в списку та його оцінки"<<endl<<endl;
	cout<<"№	Оцинка	Оцинка	Оцинка	Оцинка"<<endl;
	cout<<"-------------------------------------"<<endl;
	for(int i=0;i<5;i++)
		{
			for(int j=0;j<5;j++)
			{
				cout<<mas[i][j]<<"	";
			}
			cout<<endl;
		}
	cout<<endl;
}

void vuvid1(double *mas) // виведення допоміжного масиву на екран 
{ 
	cout<<"Середнє значення кожного студента:"<<endl;
	cout<<"№	Оцинка"<<endl;
	cout<<"-----------------------------"<<endl;
	for(int i=0;i<5;i++)
		{	
			cout<<i<<"	"<<mas[i]<<endl;	
		} 
	cout<<endl;
}

cilk::reducer_opadd<double> sum; // оголошення редуктора

void sr_znach(int mas[5][5],int z) // знаходження середнього значення оцінок кожного з студентів
{
	double s=0;  
	for(int i=1;i<5;i++)
		{	
			s+=mas[z][i]; // параметр z вказує на номер студента в списку 	
		} 
	sum.set_value(s/4); // присвоєння редуктору середнього значення оцінок вказуного студента 
}

void znach(double *b) // пошук і виведення на екран номерів студентів
{
	for(int i=0;i<5;i++)
	{
		if(b[i]>=4.5) cout<<"Номер студента, в якого середнє значення оцінок перевищує 4,5: "<<i<<endl;
	}
	cout<<endl;
}

int main()
{
	setlocale( LC_ALL,"ukr" );
	int a[5][5]= {
		{1,5,5,5,5},
		{2,2,2,2,2},
		{3,5,4,3,5},
		{4,3,3,3,3},
		{5,5,4,5,4}
	};
	
	double b[5];
	int c=0;
	cilk_spawn vuvid(a);
	cilk_sync;
	cilk_for(int i = 0; i < 5; i++) //розпаралелювання циклу	
		{
			sum.set_value(c);
			cilk_spawn sr_znach(a,i);
			cilk_sync;
			b[i] = sum.get_value();			
		}
	cilk_sync;
    cilk_spawn vuvid1(b);
	cilk_sync;
	cilk_spawn znach(b);
    system("pause");
    return 0;
}


//3) Заданий двовимірний масив. Перевірте чи можна переставити елементи кожного рядка так, щоб вони розташувалися в строго 
зростаючому порядку. 
//Лістинг програми
#include <cstdlib>
#include <cilk/cilk.h>
#include <cilk/reducer_opadd.h>
#include <windows.h>
#include<iostream>
#include<time.h>
#include <stdio.h>

using namespace std;
int N,M;
cilk::reducer_opadd<int> s; // оголошення редуктора

void gen(int** x,int N,int M, int i)
{
		for(int j=0;j<M;j++)
		{
			x[i][j]=rand()%25;
		}	
}

void masvuvid(int** x,int N,int M)
{
	for(int i=0;i<N;i++)
	{
		for(int j=0;j<M;j++)
		{
			cout<<x[i][j]<<"	";
		}
		cout<<endl;
	}
}

void sort(int** a,int N,int M,int i)
{
	for(int j=0;j<M-1;j++)
	{
		 for(int r=j+1;r<M;r++)
		{
			 if(a[i][j]>a[i][r])
				 {
					int x=a[i][j];
					a[i][j]=a[i][r];
					a[i][r]=x;
			     }
		}
	}
}

void maspe(int** a,int N,int M, int i)
{
	int p,k=0;
	for(int j=0;j<M;j++)
	{
		s.set_value(a[i][j]);
			for(int t=0;t<M;t++)
				if (s.get_value() == a[i][t])
					{
						k=k++;
					}
	}
 if (k>M)
 {	cout<<"Рядок "<<i<<" неможна"<<endl;	}
 else 
 {	cout<<"Рядок "<<i<<" можна"<<endl;	}
	k=0;
}

void main()
{
 setlocale(LC_ALL,"rus");
 cout<<"N= ";
 cin>>N;
 cout<<endl<<"M= ";
 cin>>M;
	int **a = new int* [N];
        for (int i = 0; i < N; i++)
        {
                a[i] = new int [M];
        }
	int k,t,n,m,p;

 cout<<"Початковий масив"<<endl;	
 srand(time(NULL));
 cilk_for(int i = 0; i < N; i++)
  {
	cilk_spawn gen(a,N,M,i);// генерація елементів масиву
	cilk_sync;
  }	
	cilk_spawn masvuvid(a,N,M);	//виведення масиву
	cilk_sync;
	cout<<endl<<"Cортований масив"<<endl;
 cilk_for(int i = 0; i < N; i++)
  {
	cilk_spawn sort(a,N,M,i);		// сортування масиву
	cilk_sync;
  }

  cilk_spawn masvuvid(a,N,M);	//виведення масиву
  cilk_sync;
  
 cilk_for(int i = 0; i < N; i++)
  {
	  cilk_spawn maspe(a,N,M,i);		//перевірка
	  cilk_sync;
  }

 for(int i = 0; i < N; i++)
        delete[] a[i];
        delete[] a;
 cin.get();
 cin.get();
}

