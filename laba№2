1)	Виконує зменшення числа 43 на 1  до межі 35 при кільцевій передачі (стандартний обмін)
////
#include <mpi.h>
#include <iostream>

// Кількість створюваних процесів
// для корректної роботи - 3
int main(int argc, char **argv)
{
	int I=43,
		M=35;
	int rank;
	int tag=0;
	MPI_Status status;
	bool flag = false;
	
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD,  &rank);

	// запуск "безкінечного" циклу обміну повідомленнями
	// вихід з циклу відбувається при досягненні межі М
	while (true)
	{
		if (rank == 0){
			if (flag) {
				// при найпершій посилці повідомлення flag = false
				// і відповідно прийом будь-якого повідомлення не виконується
				
				// прийом повідомлення І від процесу 2
				MPI_Recv(&I, 1, MPI_INT, 2, tag, MPI_COMM_WORLD, &status); 
			}

			// дозволено процесу 0 приймати повідомлення від процесу 2
			flag = true; 

			if (I > M){
				I--;
				std::cout << "From process with rank=" << rank << ", I=" << I << std::endl;
			}
			MPI_Send(&I, 1, MPI_INT, 1, tag, MPI_COMM_WORLD); 
			
			// якщо досягнуто межу М - завершення циклу обміну повідомленнями
			if (I <= M) break; 
		} // кінець if для rank=0

		if (rank == 1){
			MPI_Recv(&I, 1, MPI_INT, 0, tag, MPI_COMM_WORLD, &status); 
			if (I > M){
				I--;
				std::cout << "From process with rank=" << rank << ", I=" << I << std::endl;
			}
			MPI_Send(&I, 1, MPI_INT, 2, tag, MPI_COMM_WORLD);
			if (I <= M) break; 
		} // кінець if для rank=1

		if (rank == 2){
			MPI_Recv(&I, 1, MPI_INT, 1, tag, MPI_COMM_WORLD, &status);
			if (I > M){
				I--;
				std::cout << "From process with rank=" << rank << ", I=" << I << std::endl;
			}
			MPI_Send(&I, 1, MPI_INT, 0, tag, MPI_COMM_WORLD); 
			if (I <= M) break;
		} // кінець if для rank=2
	} // кінець while(true)

	MPI_Finalize();
	return 0;
}
////
2)	Виконує послідовну передачу стрічки “To die: to sleep;” між 3 процесами (буферний обмін)
////
#include <mpi.h>
#include <iostream>

#define BUFFSIZE 100

// Кількість створюваних процесів
// для корректної роботи - 3
int main(int argc, char **argv) 
{
	char msg[BUFFSIZE];
	void *buff;
	int buff_size;
	int rank;
	int tag=0;
	MPI_Status status;
	
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD,  &rank);

	// створення буферу для буферизації повідомлень
	MPI_Buffer_attach(malloc(BUFFSIZE + MPI_BSEND_OVERHEAD), BUFFSIZE + MPI_BSEND_OVERHEAD);
	
	switch (rank){
	case 0:
		// формування повідомлення для
		// послідовного передавання
		strcpy(msg, "To die: to sleep;");
		std::cout << "from process " << rank << ": " << msg;

		MPI_Bsend(&msg, BUFFSIZE, MPI_CHAR, 1, tag, MPI_COMM_WORLD);
		MPI_Buffer_detach(&buff, &buff_size);
		break;
	case 1:
		MPI_Recv(&msg, BUFFSIZE, MPI_CHAR, 0, tag, MPI_COMM_WORLD, &status);
		std::cout << "from process " << rank << ": " << msg;
		
		MPI_Bsend(&msg, BUFFSIZE, MPI_CHAR, 2, tag, MPI_COMM_WORLD);
		MPI_Buffer_detach(&buff, &buff_size);
		break;
	case 2:
		MPI_Recv(&msg, BUFFSIZE, MPI_CHAR, 1, tag, MPI_COMM_WORLD, &status);
		std::cout << "from process " << rank << ": " << msg;
		MPI_Buffer_detach(&buff, &buff_size);
		break;
	}
	MPI_Finalize();
	return 0;
}
////
3)	Виконує розсилку всім процесам введеного з клавіатури слова, після чого число виводиться на екран парними процесами(синхронний обмін)
////
#include <mpi.h>
#include <iostream>
using namespace std;

// Кількість створюваних процесів - 6
int main(int argc, char **argv)
{
	char s[7];
	int rank;
	int tag=0;
	int l;

	MPI_Status status;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD,  &rank);

	if (rank == 0)
	{
		cout<<"Vedit slovo: ";
		cin>>s;
		l=sizeof(s)-1;
			if(rank % 2 ==0)
			{	cout << "From process: "<< rank<<" ";
				for(int i=0; i<l; i++) {cout<<s[i];}
			}
		MPI_Ssend(&s,8, MPI_CHAR, 1, tag, MPI_COMM_WORLD);
	}

	if (rank == 1)
	{
		MPI_Recv(&s,8, MPI_CHAR, 0, tag, MPI_COMM_WORLD, &status);
		l=sizeof(s)-1;
		if(rank % 2 ==0)
			{
				cout << "From process: "<< rank<<" ";
				for(int i=0; i<l; i++) {cout<<s[i];}
			 
			}
	MPI_Ssend(&s,8, MPI_CHAR, 2, tag, MPI_COMM_WORLD);
	}

	if (rank == 2)
	{
		MPI_Recv(&s,8, MPI_CHAR, 1, tag, MPI_COMM_WORLD, &status);
		l=sizeof(s)-1;
		if(rank % 2 ==0)
			{
				cout << "From process: "<< rank<<" ";
				for(int i=0; i<l; i++) {cout<<s[i];}
			}
	MPI_Ssend(&s,8, MPI_CHAR, 3, tag, MPI_COMM_WORLD);
	}


		if (rank == 3)
	{
		MPI_Recv(&s,8, MPI_CHAR, 2, tag, MPI_COMM_WORLD, &status);
		l=sizeof(s)-1;
		if(rank % 2 ==0)
			{
				cout << "From process: "<< rank<<" ";
				for(int i=0; i<l; i++) {cout<<s[i];}

			}
	MPI_Ssend(&s, 8, MPI_CHAR, 4, tag, MPI_COMM_WORLD);
	}

			if (rank == 4)
	{
		MPI_Recv(&s, 8, MPI_CHAR, 3, tag, MPI_COMM_WORLD, &status);
		l=sizeof(s)-1;
		if(rank % 2 ==0)
			{
				cout << "From process: "<< rank<<" ";
				for(int i=0; i<l; i++) {cout<<s[i];}
			}
	MPI_Ssend(&s, 8, MPI_CHAR, 5, tag, MPI_COMM_WORLD);
	}

				if (rank == 5)
	{
		MPI_Recv(&s, 8, MPI_CHAR, 4, tag, MPI_COMM_WORLD, &status);
		l=sizeof(s)-1;
		if( rank % 2 == 0)
			{
				cout << "From process: "<< rank<<" ";
				for(int i=0; i<l; i++) {cout<<s[i];}
		} }
	MPI_Finalize();
	return 0; }
